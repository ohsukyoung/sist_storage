■ ■ ■ JDBC 프로그래밍 절차 ■ ■ ■ 

1. 드라이버 로딩
    Class.format();
    -> Oracle Driver 를 JAVA 에서 사용하기 위해 드라이버를 JVM 에 로딩하는 과정.
    /* 사용할 드라이버가 있다는 걸 확인하는 용도. () 안의 매개변수가 드라이버로 로딩될 수 있는지 확인하는 과정 */

2. 커넥션 할당받기
    Drivermanager.getConnection();
    /* 채석장~광부를 연결하는 빨간줄 */

3. 쿼리문 전송을 위한 작업 객체 할당받기
    Statement 또는 PreparedStatement 할당받기
    conn.createStatement(); 또는 conn.preparedStatement();

4. 작업 객체를 활용하여 쿼리문 전송
    ○ DML(insert, update, delete)문인 경우
        int updateCount = stmt.executeUpdate(sql);
        -> 영향받은 레코드 수(적용된 행의 갯수) 반환
        /* - executeUpdate: 오라클에 전달했더니, 실행하고 나면 값이 바뀔때(DB값이 바뀔때)
        변환된 레코드 수를 count 하기도 함. 그래서 return 자료형이 int 일 수 있도록
        int 변수 설정해서 값을 받을 수 있도록 코드 작성
        */
    
    ○ select 문인 경우
        ResultSet rs = stmt.executeAuery(sql);
        -> 결과 집한 형태로 ResultSet 반환
        /* - excuteAury: 전달하고 나서 값이 바뀌지 않을 때 */

5. (select 구문의 경우)
    ResultSet 의 논리적 커서 이동을 통해 각 컬럼의 데이터를 바인딩해 온다.

    boolean b = rs.next();
    -> 커서이동.
        커서가 위치한 지점에 레코드가 존재하면 true 를 반환, 없으면 false 를 반환
        커서는 가장 선두 첫 번째 레코드의 직전에 위치하고 있다가
        <next()>가 호출되면 진행한다.

6. 사용을 마친 리소스 반납
    rs.colse();     -> ResultSet 사용했을 경우.
    stmt.close();   -> Statement 사용했을 경우.
    DBConn.close(); -> null 체크하여 close() 해 주는 거을 권장.
                        finally 블럭에서 구현하는 것을 권장.

/*
** 광산         (1) 소통끈: Connection
    채석장 -------------------------------------- 인부들(광부들)
                석탄,구리 달라는 쪽지
                (2) 바구니 : Statement
                (3) 바구니안에 있는 인부: 
                ㄴ 결과를 받았다고 해서 connection을 끊어버리면 안됨
*/












