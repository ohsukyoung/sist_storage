■■■ Spring MVC ■■■

1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework.
   Spring 에서는 DispatcharServlet 클래스가 컨트롤러 역할을 수행하게 된다.

2. Spring MVC 의 주요 구성요소
   - DispatcherServlet
   - HandlerMapping
   - Controller: 사용자 정의 Controller. 액션 처리. 우리가 작성.
   - ModelAndView
   - view: 결과 출력. 우리가 작성
   - web.xml: DispatcherServlet 객체 등록. 우리가 작성.
   - dispatcher-servlet.xml: Controller 객체 등록. 우리가 작성.

3. Spring MVC 실행 흐름
    - 사용자 요청 → DispatcherServlet
    - DispatcherServlet → HandlerMapping 에 주소 분석 요청
    - DispatcharServlet → 특정 Controller 객체 호출 및 결과 수신.
                          결과는 ModelAndView 객체.
        ※ ModelAndView 객체
          : View 객체 정보와 결과값이 들어있는 객체.
    - DispatcharServlet → ViewResolver 에 View 객체 분석 요청.
    - DispatcherServlet → 특정 View 객체에 Model 객체를 넘겨주고
                          결과 출력.

4. Spring MVC 에서 우리가 해야 할 일

   - Controller
     액션 처리를 담당하는 Controller 클래스 작성.
     Annotation 을 사용하거나, Controller 인터페이스를 구현하여 작성.

   - View
     결과 출력용 JSP 페이지 작성.

   - web.xml
     서블릿 주소와 DispatcharServlet 클래스 등록.
   /* 프론트 컨트롤러 디스패처서블릿 등록(인포데스크로 연결), 한번 연결하면 수정 할 것이 거의 없을 것 */

   - dispatcher-servlet.xml
     우리가 작성한 Controller 객체 등록.
     URL 매핑 주소 등록.
   /* 건물 입구의 안내데스크 */

   - 업무 로직 전용 및 수행 가능한 
     Model 관련 계층 서비스 구성
     · Connection
     · DTO
     · DAO
        :

※ Spring 이 스트럿츠를 비롯하여 다양한 웹 프레임워크와
   비교적 연동이 잘 되는 편이기는 하지만
   서로 다룬 두 프레임워크를 연동하기 위해서는
   설정의 중복 등 개발 과정에서 불편함이 존재할 수 밖에 없다.
   따라서, Spring 이 자체적으로 제공하는 MVC 프레임워크를 사용하게 되면
   Spring 이 제공하는 AOP, 트랜잭션 처리, IoC/DI 등의 기능을
   그대로 사용하면서 MVC 패턴에 기반하여 웹 어플리케이션을 개발할 수 있다.
   또한, 다른 프레임워크와 Spring 을 연동하기 위해서
   설정을 중복해서 적용해야 한다던지.. 하는 개발 과정에서 나타나는
   불편을 해소할 수 있게 된다.

--------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 01 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성 (비STS 버전)
  : Mvc01

○ 톰캣 서버 등록 및 포트(port) 설정 (인코딩 필터 적용 이전)
  : port 3306 / URIEncoding="UTF-8"

○ 기타 환경 설정
  : 기본 환경 설정은 web_standard.epf 를 통해 구성
    (폰트, 줄번호, 편집포맷, 인코딩방식, 템플릿 등...)

○ Spring MVC 환경 설정 및 라이브러리 등록
  : WebContent > Web-INF > lib 경로에 등록
  - 경로1    → C:\s-f-3.0.2-with-docs\dist
    · 파일1  → org.springframework.aop-3.0.2.RELEASE.jar
    · 파일2  → org.springframework.asm-3.0.2.RELEASE.jar
    · 파일3  → org.springframework.beans-3.0.2.RELEASE.jar
    · 파일4  → org.springframework.context-3.0.2.RELEASE.jar
    · 파일5  → org.springframework.core-3.0.2.RELEASE.jar
    · 파일6  → org.springframework.expression-3.0.2.RELEASE.jar
    · 파일7  → org.springframework.jdbc-3.0.2.RELEASE.jar
    · 파일8  → org.springframework.transaction-3.0.2.RELEASE.jar
    · 파일9  → org.springframework.web.servlet-3.0.2.RELEASE.jar
    · 파일10 → org.springframework.web-3.0.2.RELEASE.jar
  - 경로2    → C:\s-f-3.0.2-dependencies\org.apache.commons
                \com.springsource.org.apache.commons.logging\1.1.1
    · 파일11 → com.springsource.org.apache.commons.logging-1.1.1.jar
  - 경로3    → C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
               (오라클 설치 경로)
    · 파일12 → ojdbc6.jar
  - 경로4    → C:\Downloads\12_JSTL\jakarta-taglibs-standard-1.1.2\lib
               (JSTL 다운로드 경로)
    · 파일13 → jstl.jar
    · 파일14 → standard.jar

○ 물리적 파일 구성
   - HelloController.jar      → 컨트롤러
   - Hello.jsp                → 
   - dispatcher-servlet.xml   → 디스패처서블릿 객체를 가져와야 하기 때문에 파일이름 바꿀 수 없음
   - web.xml                  → 디스패처서블릿 등록
   - hello.action             → hello.do 와 같은 빈 파일
    
   ※ 『Dispatcher-servlet.xml』 파일의 기본 설정 내용(템플릿)을 구성하기 위해
      스프링 DOC 의 내용을 참고해서 작성할 수 있도록 했다.
      · 경로 → file:///C:/s-f-3.0.2-with-docs/docs/spring-framework-reference/htmlsingle
      · 파일 → spring-framework-reference.html
               - 인덱스번호: 15.3.1. Defining a controller with @Controller
               - 링크: file:///C:/s-f-3.0.2-with-docs/docs/spring-framework-reference/htmlsingle/spring-framework-reference.html#mvc-ann-controller
      · 내용(위치) → 해당 pdf 문서의 페이지 번호 상 425 페이지
                    파일 구조의 바로가기 인덱스 상 450/805 페이지
      · 해당 위치로 이동하면 XML 파일에 대한 샘플(템플릿) 코드가 있다.
        이 내용을 복사하여 dispatcher-servlet.xml 파일의 기본내용으로 작성한다.

○ 사용자 최초 요청 주소
   http://localhost:3306/Mvc01/hello.action

※ 우리가 작성한 MVC01 프로젝트의 실행 및 처리과정 정리

   ① 외부 요청
      http://localhost:3306/Mvc01/hello.action
      ===========================
        http://www.test.co.kr
      → web.xml 관여
         (→ Front Controller 등록 → DispatcharServlet 등록)

   ② DispatcharServlet 요청 접수
      
      → web.xml → DispatcharServlet 등록
        web.xml → URL 패턴 등록

      → 사용자 요청 분석 → 특정 컨트롤러 지정
   
   ③ 해당 컨트롤러의 특정 메소드 호출(액션 처리, ModelAndView 객체 반환)

      → 사용자의 요청에 맞는 액션 처리

      → 결과 데이터가 들어있는 모델 객체 준비

      → 뷰 정보(JSP 페이지 정보) 반환
         ※ JSP 페이지 정보
            - 여기서는 객체가 아닌 경로 포함된 View 페이지의 이름

   ④ 뷰 페이지에서 최종 웹페이지를 작성      
      → JSP 페이지 내에서 EL 이나 JSTL 등의 표기 사용 가능
   
   ⑤ 응답완료~!!!

--------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 02 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성 (비STS 버전)
  : Mvc02

○ 기본 환경 구성 및 라이브러리 설정
  : Mvc00 (우리가 임의로 구성해둔 샘플)로 부터
    src, WebContent 디렉터리 복사 & 덮어쓰기

○ 실습 성격
  : 데이터 송수신 관련 실습(Spring MVC 버전)

○ 물리적 파일 구성
   - SendController.Java         → 컨트롤러 객체
   - Send.java                   → 뷰 객체

   - Receivecontroller.java      → 컨트롤러 객체
   - Receive.jsp                 → 뷰 객체
   
   - web.xml                     → DispatcharServlet 객체 등록 / URL 매핑 주소 등록
   - dispatcher-servelet.xml     → 컨트롤러 객체 등록 / URL 매핑 주소 등록
   
   - send.do                     → 이클립스 실행 과정에서 요청을 위한 빈 파일

○ 사용자 최초 요청 주소
   http://localhost:3306/Mvc02/send.do

--------------------------------------------------------------------------------------

○ js, css는 WEB-INF

--------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 03 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성 (비STS 버전)
  : Mvc03

○ 기본 환경 구성 및 라이브러리 설정
  : Mvc00 (우리가 임의로 구성해둔 샘플)로 부터
    src, WebContent 디렉터리 복사 & 덮어쓰기

○ 실습 성격
  : 데이터 송수신 관련 실습(Spring MVC 버전)
    JDBC 모듈 추가 활용
    SimpleDriverDataSource 클래스(객체) 활용

○ 기능 구현
  : 사용자로부터 이름, 전화번호 정보를 입력받아 데이터베이스에 저장
    저장된 이름, 전화번호 항목을 데이터베이스로부터 읽어 화면에 구성

○ 사전 작업
  - TBL_MEMBERLIST 테이블 생성
  - MEMBERLISTSEQ 시퀀스 생성
  - 샘플 데이터 입력 및 조회

○ 기본 레이아웃(페이지 화면 구성)
  이름 [    ]   -> <input type="text">
  전화 [    ]   -> <input type="text">
  <회원 추가>   -> <button type="button">

  전체 인원 수: 2명 -> <p>...</p>
  ---------------- -> <table>...</table>
  번호 이름 전화번호
  1   노.. 010..
  2   김.. 010..
  ----------------

  ->** 보여주는 것을 한페이지로 구성

○ 물리적 파일 구성
  - Mvc03_scott.sql             → 데이터에비스 관련 객체 구성 및 실습 데이터 준비

  - MemberDTO.java              → 사용자 정의 자료형 클래스(DTO 활용)
  
  - IMemberDAO.java             → 인터페이스
  - MemberDAO.java              → 데이터베이스 액션 처리 클래스
                                  Connection 객체에 대한 의존성 주입
                                  (의존성 주입을 위한 준비 필요)

  - MemberListController.java   → 사용자 정의 컨트롤러 클래스
                                  리스트 출력 액션
                                  DAO 객체에 대한 의존성 주입
                                  (의존성 주입을 위한 준비 필요) /* **setter, 생성자..** */

  - MemberList.jsp              → 리스트 출력용 뷰
                                  회원 데이터 입력(추가) 폼 화면 구성
  
  - MemberInsertController.java → 사용자 정의 컨트롤러 클래스
                                  회원 데이터 추가 액션
                                  DAO 객체에 대한 의존성 주입
                                  (의존성 주입을 위한 준비 필요)
   
   - web.xml                    → DispatcharServlet 객체 등록
                                  URL 매핑 주소 등록

   - dispatcher-servelet.xml    → 컨트롤러 객체 등록
                                  URL 매핑 주소 등록
                                  SimpleDriverDataSource 객체 등록
                                  의존 객체 주입 설정
                                  DAO 객체 등록
   
   - memberlist.do                    → 이클립스 실행 과정에서 요청을 위한 빈 파일

○ 사용자 최초 요청 주소
   http://localhost:3306/Mvc03/memberlist.do

/* **프레임워크 최대 단점 작은 일에도(심지어 하나의 페이지로 끝낼 수 있는데..) 많은 페이지가 요구됨
 -> 파이널 프로젝트에서 많은 파일 생산해야함
  TIP) 주제가 윤곽이 잡히면.. DB 설계, 정규화, 문서작업과 독립적으로 뷰작업하기!!(보여져야 한다는 작업하기)
  ㄴ 팀원들이 작업해보기..(틈나는 대로)
  ㄴ 혼자 있더라도 먼저 작업 착수해보기..
  ㄴ 뭉쳐지고 흩어지는 전략을 잘 세우기
 ** */

 --------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 03 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성 (비STS 버전)
  : Mvc04

○ 기본 환경 구성 및 라이브러리 설정
  : Mvc00 (우리가 임의로 구성해둔 샘플)로 부터
    src, WebContent 디렉터리 복사 & 덮어쓰기

○ 실습 성격
  : 직원 관리 프로그램(Spring MVC 버전)
    JDBC 모듈 추가 활용
    SimpleDriverDataSource 클래스(객체) 활용

○ 기능 구현(데이터 각 유형별 CRUD 실습)
  - 직원 정보 입력, 출력, 수정, 삭제 기능 구현.
  - 지역 정보 입력, 출력, 수정, 삭제 기능 구현.
  - 부서 정보 입력, 출력, 수정, 삭제 기능 구현.
  - 직위 정보 입력, 출력, 수정, 삭제 기능 구현.
  - 로그인 / 로그아웃 기능 구현.
    → 관리자 및 일반 직원 로그인 구분.
  ==> Spring MVC, JSP/Servlet, Oracle, HTMl/CSS/Javascript, AJAX
      , JQuery, EL, JSTL 표현 등 사용.

○ 사전 작업 → 테이블 및 시퀀스, 주요 쿼리문, 샘플 데이터 등 구성
  - EMPLOYEE   직원
  - REGION     지역
  - DEPARTMENT 부서
  - POSITION   직위
  - 샘플 데이터 입력

○ 물리적 파일 구성
   #00. Mvc04_scott.sql            → 데이터베이스 관련 객체 구성 및 실습 데이터 준비
	
      < DTO >
   #01. Employee.java		  → DTO 계층, 직원 데이터 자료형 클래스.
   #02. Department.java		→ DTO 계층, 부서 데이터 자료형 클래스.
   #03. Region.java		    → DTO 계층, 지역 데이터 자료형 클래스.
   #04. Posiition.java		  → DTO 계층, 직위 데이터 자료형 클래스.

   #05. IEmployeeDAO.java		→ 인터페이스.
   #06. IDepartmentDAO.java	  → 인터페이스.
   #07. IRegionDAO.java		    → 인터페이스.
   #08. IPostionDAO.java		    → 인터페이스.

   #09. EmployeeDAO.java		    → 데이터베이스 액션 처리 클래스
                                   직원 데이터 CRUD 액션
                                   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 구성 / setter 구성)
   #10. DepartmentDAO.java		  → 데이터베이스 액션 처리 클래스
                                   직원 데이터 CRUD 액션
                                   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 구성 / setter 구성)
   #11. RegionDAO.java		      → 데이터베이스 액션 처리 클래스
                                   직원 데이터 CRUD 액션
                                   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 구성 / setter 구성)
   #12. PositionDAO.java		    → 데이터베이스 액션 처리 클래스
                                   직원 데이터 CRUD 액션
                                   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 구성 / setter 구성)

   #13. EmployeeMenu.jsp		    → 메인 메뉴 뷰 페이지.
                                   로그아웃 기능 포함.

   #14. menuStyle.css		      → 메뉴 스타일 구성

   #15. EmployeeList.jsp		    → 직원 리스트 출력 페이지.

   - main.css			          → 메인 스타일 구성.

   - EmployeeListController.java → 사용자 정의 컨트롤러 클래스
                                    리스트 출력 액션
                                    DAO 객체에 대한 의존성 주입
                                    (의존성 주입을 위한 준비 필요)

   - web.xml			          → DispatcherServlet 객체 등록
                                   URL 매핑 주소 등록

   - dispatcher-servlet.xml     → 컨트롤러 객체 등록
                                   URL 매핑 주소 등록
                                   SimpleDriverDataSource 객체 등록
                                   의존 객체 주입 설정
                                   DAO 객체 등록

   - employeelist.action        → 이클립스 실행 과정에서 요청을 위한 빈 파일

   - EmployeeInsertFormController.java
     (employeeinsertform.action)

   - EmployeeInsertController.java
     (employeeinsert.action)

   - AjaxController.java
     (ajax.action)

   - Ajax.jsp

   - EmployeeUpdateForm.jsp

   - EmployeeUpdateFormController.java
     (employeeupdateform.action)

   - EmployeeUpdateController.java
     (employeeupdate.action)

   - EmployeeDeleteController.java
     (employeedelete.action)

   - LoginForm.jsp

   - LoginFormController.java

   - LoginController.java

   - LogoutController.java

   - EmpList.jsp

            :
            :         
            :

   - DepartmentList.jsp
   - DepartmentInsertForm.jsp
   - DepartmentUpdateForm.jsp

   - DepartmentListController.java
   - DepartmentInsertFormController.java
   - DepartmentInsertController.java
   - DepartmentUpdateFormController.java
   - DepartmentUpdateController.java
   - DepartmentDeleteController.java

            :
            :

   - RegionList.jsp
   - RegionInsertFrom.jsp
   - RegionUpdateForm.jsp

            :
            :

   - PositionList.jsp
   - PostitionInsertForm.jsp
   - PostitionUpdateForm.jsp


○ 사용자 최초 요청 주소
   http://localhost:3306/Mvc04/employeelist.action → 관리자
   http://localhost:3306/Mvc04/emplist.action → 일반직원

○ 추후 우리는... 실무 프로젝트를 수행하는 과정에서...
   컨트롤러를 액션 단위가 아닌, 업무 단위로 묶어 작업 처리하게 될 것이다.
   이후, 어노테이션을 활용하여 컨트롤러를 지정해서 처리하는 방법도 수행하게 될 것이다.
   하지만, 이번 실습 과정에서 기본 액션 단위의 컨트롤러 구성을 수행해 봄으로써
   Model-View-Controller 의 기능 및 처리 흐름에 대한 이해와 파악을 제대로 할 수 있도록 한다.

-------------------------------------------------------------------------------------------



